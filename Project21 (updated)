---
title: "Project 21"
output: pdf_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

**Name: Hemali Bhas**

This project is supposed to be an easy modification of the project example, 
since it is almost time for Spring Break! 

Note:  Do not worry if some of the results have extra spaces.  We can 
deal with that later! 

**1.** Modify the NPS example to extract the city location for every 
National Park.
```{r}
library(RCurl)
library(XML)
myparks <- xpathSApply(htmlParse(getURL("https://nps.gov/findapark/index.htm")),"//*/div/select/optgroup/option", xmlGetAttr, "value")
myparks
xpathSApply(htmlParse(getURL("https://www.nps.gov/city/index.htm")),"//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)
x <- "city"
xpathSApply(htmlParse(getURL( paste0("https://www.nps.gov/", x, "/index.htm"))), "//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)
mynameextractor <- function(x) {xpathSApply(htmlParse(getURL( paste0("https://www.nps.gov/", x, "/index.htm"))),
"//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)}
mygoodparks <- myparks[(myparks != "cbpo)&(myparks != "foca")]
myresults <- sapply( (mygoodparks), mynameextractor )
myresults

```
Explain solution: This code extracts the city locations by changing the url and building a function to find the values of the park names.

**2.** Same question, for the state location for every National Park. 
```{r}
xpathSApply(htmlParse(getURL("https://www.nps.gov/state/index.htm")),"//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)
x <- "state"
xpathSApply(htmlParse(getURL( paste0("https://www.nps.gov/", x, "/index.htm"))), "//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)
mynameextractor <- function(x) {xpathSApply(htmlParse(getURL( paste0("https://www.nps.gov/", x, "/index.htm"))),
"//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)}
mygoodparks <- myparks[(myparks != "cbpo)&(myparks != "foca")]
myresults <- sapply( (mygoodparks), mynameextractor )
myresults
```
Explain solution: This code extracts the state locations by changing the url and building a function to find the values of the park names.

**3.** Same question, for the zip code for every National Park. 
```{r}
xpathSApply(htmlParse(getURL("https://www.nps.gov/zipcode/index.htm")),"//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)
x <- "zipcode"
xpathSApply(htmlParse(getURL( paste0("https://www.nps.gov/", x, "/index.htm"))), "//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)
mynameextractor <- function(x) {xpathSApply(htmlParse(getURL( paste0("https://www.nps.gov/", x, "/index.htm"))),
"//*/div[@id='HeroBanner']/div/div/div/a", xmlValue)}
mygoodparks <- myparks[(myparks != "cbpo)&(myparks != "foca")]
myresults <- sapply( (mygoodparks), mynameextractor )
myresults
```
Explain solution: This code extracts the zip codes by changing the url and building a function to find the values of the park names.



